{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\ndocument.querySelector(\".game-max-score\").textContent = localStorage.getItem(\"score\") || 0;\nvar Game2048 = /*#__PURE__*/ function() {\n    function Game2048() {\n        var _this = this;\n        _class_call_check(this, Game2048);\n        this.TILE_CLASSES = {\n            0: \"\",\n            2: \"field-cell--2\",\n            4: \"field-cell--4\",\n            8: \"field-cell--8\",\n            16: \"field-cell--16\",\n            32: \"field-cell--32\",\n            64: \"field-cell--64\",\n            128: \"field-cell--128\",\n            256: \"field-cell--256\",\n            512: \"field-cell--512\",\n            1024: \"field-cell--1024\",\n            2048: \"field-cell--2048\"\n        };\n        this.GRID_SIZE = 4;\n        this.data = Array.from({\n            length: this.GRID_SIZE\n        }, function() {\n            return Array(_this.GRID_SIZE).fill(0);\n        });\n        this.score = 0;\n        this.inProgress = false;\n        this.startButton = document.querySelector(\".start\");\n        this.messageWin = document.querySelector(\".message-win\");\n        this.messageStart = document.querySelector(\".message-start\");\n        this.messageLose = document.querySelector(\".message-lose\");\n        this.gameScoreBlock = document.querySelector(\".game-score\");\n        this.fieldRows = document.querySelectorAll(\".field-row\");\n        document.querySelector(\".game-max-score\").textContent = this.getMaxScore();\n        this.startButton.addEventListener(\"click\", function() {\n            return _this.handleStartClick();\n        });\n        document.addEventListener(\"keydown\", function(e) {\n            return _this.handleKeyPress(e);\n        });\n    }\n    _create_class(Game2048, [\n        {\n            key: \"handleStartClick\",\n            value: function handleStartClick() {\n                if (this.startButton.innerText === \"Start\") this.startGame();\n                else this.restartGame();\n            }\n        },\n        {\n            key: \"startGame\",\n            value: function startGame() {\n                this.startButton.innerText = \"Restart\";\n                this.startButton.classList.replace(\"start\", \"restart\");\n                this.messageStart.classList.add(\"hidden\");\n                this.clearField();\n                this.randomizer(2);\n                this.inProgress = true;\n                this.domReload();\n            }\n        },\n        {\n            key: \"getMaxScore\",\n            value: function getMaxScore() {\n                return localStorage.getItem(\"score\") || 0;\n            }\n        },\n        {\n            key: \"restartGame\",\n            value: function restartGame() {\n                this.clearField();\n                this.saveMaxScore();\n                this.score = 0;\n                this.messageLose.classList.add(\"hidden\");\n                this.messageWin.classList.add(\"hidden\");\n                this.startGame();\n            }\n        },\n        {\n            key: \"handleKeyPress\",\n            value: function handleKeyPress(e) {\n                if (!this.inProgress) return;\n                var prevData = JSON.parse(JSON.stringify(this.data));\n                var moveExecuted = false;\n                switch(e.key){\n                    case \"ArrowRight\":\n                        moveExecuted = this.makeMove(\"right\");\n                        break;\n                    case \"ArrowLeft\":\n                        moveExecuted = this.makeMove(\"left\");\n                        break;\n                    case \"ArrowDown\":\n                        moveExecuted = this.makeMove(\"down\");\n                        break;\n                    case \"ArrowUp\":\n                        moveExecuted = this.makeMove(\"up\");\n                        break;\n                }\n                if (moveExecuted && !this.isEqual(prevData, this.data)) {\n                    this.randomizer(1);\n                    if (this.isGameOver()) this.endGame();\n                    else this.domReload();\n                }\n            }\n        },\n        {\n            key: \"makeMove\",\n            value: function makeMove(direction) {\n                if (this.isGameOver()) return false;\n                this.mergeTiles(direction);\n                this.tileMovement(direction);\n                this.isWin();\n                return true;\n            }\n        },\n        {\n            key: \"endGame\",\n            value: function endGame() {\n                this.inProgress = false;\n                this.messageLose.classList.remove(\"hidden\");\n                this.domReload();\n            }\n        },\n        {\n            key: \"isEqual\",\n            value: function isEqual(arr1, arr2) {\n                return JSON.stringify(arr1) === JSON.stringify(arr2);\n            }\n        },\n        {\n            key: \"tileMovement\",\n            value: function tileMovement(direction) {\n                for(var i = 0; i < this.data.length; i++){\n                    var values = void 0;\n                    if (direction === \"right\" || direction === \"left\") {\n                        values = this.getHorizontalValues(i, direction);\n                        this.data[i] = values;\n                    } else if (direction === \"down\" || direction === \"up\") {\n                        values = this.getVerticalValues(i, direction);\n                        this.data = this.updateDataArray(this.data, values, direction, i);\n                    }\n                }\n            }\n        },\n        {\n            key: \"getHorizontalValues\",\n            value: function getHorizontalValues(rowIndex, direction) {\n                var nonZeroValues = this.data[rowIndex].filter(function(element) {\n                    return element !== 0;\n                });\n                var zeroValues = this.data[rowIndex].filter(function(element) {\n                    return element === 0;\n                });\n                return direction === \"right\" ? zeroValues.concat(nonZeroValues) : nonZeroValues.concat(zeroValues);\n            }\n        },\n        {\n            key: \"getVerticalValues\",\n            value: function getVerticalValues(columnIndex, direction) {\n                var column = this.data.map(function(row) {\n                    return row[columnIndex];\n                });\n                var nonZeroValues = column.filter(function(element) {\n                    return element !== 0;\n                });\n                var zeroValues = column.filter(function(element) {\n                    return element === 0;\n                });\n                return direction === \"down\" ? zeroValues.concat(nonZeroValues) : nonZeroValues.concat(zeroValues);\n            }\n        },\n        {\n            key: \"mergeTiles\",\n            value: function mergeTiles(direction) {\n                var _this = this, _loop = function(index) {\n                    var values = _this.getValues(direction, index);\n                    var merged = Array(_this.data.length).fill(false);\n                    var nonZeroValues = values.filter(function(element) {\n                        return element !== 0;\n                    });\n                    var zeroValues = values.filter(function(element) {\n                        return element === 0;\n                    });\n                    if (direction === \"down\" || direction === \"right\") {\n                        for(var i = nonZeroValues.length - 1; i > 0; i--)_this.mergeAdjacentTiles(i, nonZeroValues, merged);\n                        _this.data = _this.updateDataArray(_this.data, zeroValues.concat(nonZeroValues), direction, index);\n                    } else if (direction === \"up\" || direction === \"left\") {\n                        for(var i1 = 0; i1 < nonZeroValues.length - 1; i1++)_this.mergeAdjacentTiles(i1, nonZeroValues, merged);\n                        _this.data = _this.updateDataArray(_this.data, nonZeroValues.concat(zeroValues), direction, index);\n                    }\n                };\n                for(var index = 0; index < this.data.length; index++)_loop(index);\n            }\n        },\n        {\n            key: \"mergeAdjacentTiles\",\n            value: function mergeAdjacentTiles(i, nonZeroValues, merged) {\n                if (nonZeroValues[i] === nonZeroValues[i - 1] && !merged[i]) {\n                    nonZeroValues[i] += nonZeroValues[i - 1];\n                    this.score += nonZeroValues[i];\n                    nonZeroValues[i - 1] = 0;\n                    merged[i] = true;\n                }\n            }\n        },\n        {\n            key: \"getValues\",\n            value: function getValues(direction, index) {\n                return direction === \"down\" || direction === \"up\" ? this.data.map(function(row) {\n                    return row[index];\n                }) : this.data[index].slice();\n            }\n        },\n        {\n            key: \"updateDataArray\",\n            value: function updateDataArray(data, values, direction, index) {\n                if (direction === \"down\" || direction === \"up\") for(var row = 0; row < data.length; row++)data[row][index] = values[row];\n                else if (direction === \"left\" || direction === \"right\") data[index] = values.slice();\n                return data;\n            }\n        },\n        {\n            key: \"randomizer\",\n            value: function randomizer(count) {\n                for(var i = 0; i < count; i++){\n                    var emptyPositions = this.getEmptyPositions();\n                    if (emptyPositions.length > 0) {\n                        var randomIndex = Math.floor(Math.random() * emptyPositions.length);\n                        var _emptyPositions_randomIndex = emptyPositions[randomIndex], row = _emptyPositions_randomIndex.row, tile = _emptyPositions_randomIndex.tile;\n                        this.data[row][tile] = Math.random() * 2 > 1.9 ? 4 : 2;\n                    }\n                }\n            }\n        },\n        {\n            key: \"getEmptyPositions\",\n            value: function getEmptyPositions() {\n                var emptyPositions = [];\n                for(var row = 0; row < this.data.length; row++){\n                    for(var tile = 0; tile < this.data[row].length; tile++)if (this.data[row][tile] === 0) emptyPositions.push({\n                        row: row,\n                        tile: tile\n                    });\n                }\n                return emptyPositions;\n            }\n        },\n        {\n            key: \"colorizing\",\n            value: function colorizing() {\n                var _this = this;\n                this.fieldRows.forEach(function(row, rowIndex) {\n                    var cellsInRow = row.querySelectorAll(\".field-cell\");\n                    _this.data[rowIndex].forEach(function(cellValue, tileIndex) {\n                        cellsInRow[tileIndex].className = \"field-cell \".concat(_this.TILE_CLASSES[cellValue]);\n                    });\n                });\n            }\n        },\n        {\n            key: \"isWin\",\n            value: function isWin() {\n                if (this.data.some(function(row) {\n                    return row.includes(2048);\n                })) {\n                    this.messageWin.classList.remove(\"hidden\");\n                    this.inProgress = false;\n                }\n            }\n        },\n        {\n            key: \"clearField\",\n            value: function clearField() {\n                var _this = this;\n                this.data = Array.from({\n                    length: this.GRID_SIZE\n                }, function() {\n                    return Array(_this.GRID_SIZE).fill(0);\n                });\n            }\n        },\n        {\n            key: \"domReload\",\n            value: function domReload() {\n                var _this = this;\n                this.fieldRows.forEach(function(row, rowIndex) {\n                    var cellsInRow = row.querySelectorAll(\".field-cell\");\n                    _this.data[rowIndex].forEach(function(cellValue, tileIndex) {\n                        cellsInRow[tileIndex].textContent = cellValue === 0 ? \" \" : cellValue;\n                    });\n                });\n                this.gameScoreBlock.textContent = this.score;\n                this.colorizing();\n            }\n        },\n        {\n            key: \"saveMaxScore\",\n            value: function saveMaxScore() {\n                if (this.score > localStorage.getItem(\"score\")) localStorage.setItem(\"score\", this.score);\n            }\n        },\n        {\n            key: \"cycle\",\n            value: function cycle(check) {\n                for(var row = 0; row < this.data.length; row++){\n                    if (check) for(var tile = 0; tile < this.data[row].length - 1; tile++){\n                        if (this.data[row][tile] === this.data[row][tile + 1] || this.data[row][tile] === 0) return false;\n                    }\n                    else for(var tile1 = 0; tile1 < this.data[row].length; tile1++){\n                        if (row < this.data.length - 1 && (this.data[row][tile1] === this.data[row + 1][tile1] || this.data[row][tile1] === 0)) return false;\n                    }\n                }\n                return true;\n            }\n        },\n        {\n            key: \"isGameOver\",\n            value: function isGameOver() {\n                if (this.data.some(function(row) {\n                    return row.includes(0);\n                })) return false;\n                if (!this.cycle(true) || !this.cycle(false)) return false;\n                this.saveMaxScore();\n                localStorage.setItem(\"score\", this.score);\n                return true;\n            }\n        }\n    ]);\n    return Game2048;\n}();\n// eslint-disable-next-line no-unused-vars\nvar game = new Game2048();\n\n//# sourceMappingURL=index.ab88968d.js.map\n","'use strict';\r\n\r\ndocument.querySelector(\r\n  '.game-max-score',\r\n).textContent = localStorage.getItem('score') || 0;\r\n\r\nclass Game2048 {\r\n  constructor() {\r\n    this.TILE_CLASSES = {\r\n      0: '',\r\n      2: 'field-cell--2',\r\n      4: 'field-cell--4',\r\n      8: 'field-cell--8',\r\n      16: 'field-cell--16',\r\n      32: 'field-cell--32',\r\n      64: 'field-cell--64',\r\n      128: 'field-cell--128',\r\n      256: 'field-cell--256',\r\n      512: 'field-cell--512',\r\n      1024: 'field-cell--1024',\r\n      2048: 'field-cell--2048',\r\n    };\r\n\r\n    this.GRID_SIZE = 4;\r\n\r\n    this.data = Array.from({ length: this.GRID_SIZE }, () => Array(\r\n      this.GRID_SIZE).fill(0));\r\n    this.score = 0;\r\n    this.inProgress = false;\r\n\r\n    this.startButton = document.querySelector('.start');\r\n    this.messageWin = document.querySelector('.message-win');\r\n    this.messageStart = document.querySelector('.message-start');\r\n    this.messageLose = document.querySelector('.message-lose');\r\n    this.gameScoreBlock = document.querySelector('.game-score');\r\n    this.fieldRows = document.querySelectorAll('.field-row');\r\n    document.querySelector('.game-max-score').textContent = this.getMaxScore();\r\n\r\n    this.startButton.addEventListener('click', () => this.handleStartClick());\r\n    document.addEventListener('keydown', (e) => this.handleKeyPress(e));\r\n  }\r\n\r\n  handleStartClick() {\r\n    if (this.startButton.innerText === 'Start') {\r\n      this.startGame();\r\n    } else {\r\n      this.restartGame();\r\n    }\r\n  }\r\n\r\n  startGame() {\r\n    this.startButton.innerText = 'Restart';\r\n    this.startButton.classList.replace('start', 'restart');\r\n    this.messageStart.classList.add('hidden');\r\n    this.clearField();\r\n    this.randomizer(2);\r\n    this.inProgress = true;\r\n    this.domReload();\r\n  }\r\n\r\n  getMaxScore() {\r\n    return localStorage.getItem('score') || 0;\r\n  }\r\n\r\n  restartGame() {\r\n    this.clearField();\r\n    this.saveMaxScore();\r\n    this.score = 0;\r\n    this.messageLose.classList.add('hidden');\r\n    this.messageWin.classList.add('hidden');\r\n    this.startGame();\r\n  }\r\n\r\n  handleKeyPress(e) {\r\n    if (!this.inProgress) {\r\n      return;\r\n    }\r\n\r\n    const prevData = JSON.parse(JSON.stringify(this.data));\r\n    let moveExecuted = false;\r\n\r\n    switch (e.key) {\r\n      case 'ArrowRight':\r\n        moveExecuted = this.makeMove('right');\r\n        break;\r\n      case 'ArrowLeft':\r\n        moveExecuted = this.makeMove('left');\r\n        break;\r\n      case 'ArrowDown':\r\n        moveExecuted = this.makeMove('down');\r\n        break;\r\n      case 'ArrowUp':\r\n        moveExecuted = this.makeMove('up');\r\n        break;\r\n    }\r\n\r\n    if (moveExecuted && !this.isEqual(prevData, this.data)) {\r\n      this.randomizer(1);\r\n\r\n      if (this.isGameOver()) {\r\n        this.endGame();\r\n      } else {\r\n        this.domReload();\r\n      }\r\n    }\r\n  }\r\n\r\n  makeMove(direction) {\r\n    if (this.isGameOver()) {\r\n      return false;\r\n    }\r\n\r\n    this.mergeTiles(direction);\r\n    this.tileMovement(direction);\r\n    this.isWin();\r\n\r\n    return true;\r\n  }\r\n\r\n  endGame() {\r\n    this.inProgress = false;\r\n    this.messageLose.classList.remove('hidden');\r\n    this.domReload();\r\n  }\r\n\r\n  isEqual(arr1, arr2) {\r\n    return JSON.stringify(arr1) === JSON.stringify(arr2);\r\n  }\r\n\r\n  tileMovement(direction) {\r\n    for (let i = 0; i < this.data.length; i++) {\r\n      let values;\r\n\r\n      if (direction === 'right' || direction === 'left') {\r\n        values = this.getHorizontalValues(i, direction);\r\n        this.data[i] = values;\r\n      } else if (direction === 'down' || direction === 'up') {\r\n        values = this.getVerticalValues(i, direction);\r\n        this.data = this.updateDataArray(this.data, values, direction, i);\r\n      }\r\n    }\r\n  }\r\n\r\n  getHorizontalValues(rowIndex, direction) {\r\n    const nonZeroValues = this.data[rowIndex].filter(\r\n      (element) => element !== 0);\r\n    const zeroValues = this.data[rowIndex].filter((element) => element === 0);\r\n\r\n    return direction === 'right' ? zeroValues.concat(\r\n      nonZeroValues) : nonZeroValues.concat(zeroValues);\r\n  }\r\n\r\n  getVerticalValues(columnIndex, direction) {\r\n    const column = this.data.map(row => row[columnIndex]);\r\n    const nonZeroValues = column.filter((element) => element !== 0);\r\n    const zeroValues = column.filter((element) => element === 0);\r\n\r\n    return direction === 'down' ? zeroValues.concat(\r\n      nonZeroValues) : nonZeroValues.concat(zeroValues);\r\n  }\r\n\r\n  mergeTiles(direction) {\r\n    for (let index = 0; index < this.data.length; index++) {\r\n      const values = this.getValues(direction, index);\r\n      const merged = Array(this.data.length).fill(false);\r\n\r\n      const nonZeroValues = values.filter((element) => element !== 0);\r\n      const zeroValues = values.filter((element) => element === 0);\r\n\r\n      if (direction === 'down' || direction === 'right') {\r\n        for (let i = nonZeroValues.length - 1; i > 0; i--) {\r\n          this.mergeAdjacentTiles(i, nonZeroValues, merged);\r\n        }\r\n\r\n        this.data = this.updateDataArray(\r\n          this.data, zeroValues.concat(nonZeroValues), direction, index);\r\n      } else if (direction === 'up' || direction === 'left') {\r\n        for (let i = 0; i < nonZeroValues.length - 1; i++) {\r\n          this.mergeAdjacentTiles(i, nonZeroValues, merged);\r\n        }\r\n\r\n        this.data = this.updateDataArray(\r\n          this.data, nonZeroValues.concat(zeroValues), direction, index);\r\n      }\r\n    }\r\n  }\r\n\r\n  mergeAdjacentTiles(i, nonZeroValues, merged) {\r\n    if (nonZeroValues[i] === nonZeroValues[i - 1] && !merged[i]) {\r\n      nonZeroValues[i] += nonZeroValues[i - 1];\r\n      this.score += nonZeroValues[i];\r\n      nonZeroValues[i - 1] = 0;\r\n      merged[i] = true;\r\n    }\r\n  }\r\n\r\n  getValues(direction, index) {\r\n    return direction === 'down' || direction === 'up' ? this.data.map(\r\n      row => row[index]) : this.data[index].slice();\r\n  }\r\n\r\n  updateDataArray(data, values, direction, index) {\r\n    if (direction === 'down' || direction === 'up') {\r\n      for (let row = 0; row < data.length; row++) {\r\n        data[row][index] = values[row];\r\n      }\r\n    } else if (direction === 'left' || direction === 'right') {\r\n      data[index] = values.slice();\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  randomizer(count) {\r\n    for (let i = 0; i < count; i++) {\r\n      const emptyPositions = this.getEmptyPositions();\r\n\r\n      if (emptyPositions.length > 0) {\r\n        const randomIndex = Math.floor(Math.random() * emptyPositions.length);\r\n        const { row, tile } = emptyPositions[randomIndex];\r\n\r\n        this.data[row][tile] = Math.random() * 2 > 1.9 ? 4 : 2;\r\n      }\r\n    }\r\n  }\r\n\r\n  getEmptyPositions() {\r\n    const emptyPositions = [];\r\n\r\n    for (let row = 0; row < this.data.length; row++) {\r\n      for (let tile = 0; tile < this.data[row].length; tile++) {\r\n        if (this.data[row][tile] === 0) {\r\n          emptyPositions.push({\r\n            row, tile,\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return emptyPositions;\r\n  };\r\n\r\n  colorizing() {\r\n    this.fieldRows.forEach((row, rowIndex) => {\r\n      const cellsInRow = row.querySelectorAll('.field-cell');\r\n\r\n      this.data[rowIndex].forEach((cellValue, tileIndex) => {\r\n        cellsInRow[tileIndex].className = `field-cell ${\r\n          this.TILE_CLASSES[cellValue]}`;\r\n      });\r\n    });\r\n  }\r\n\r\n  isWin() {\r\n    if (this.data.some(row => row.includes(2048))) {\r\n      this.messageWin.classList.remove('hidden');\r\n      this.inProgress = false;\r\n    }\r\n  }\r\n\r\n  clearField() {\r\n    this.data = Array.from({ length: this.GRID_SIZE }, () => Array(\r\n      this.GRID_SIZE).fill(0));\r\n  }\r\n\r\n  domReload() {\r\n    this.fieldRows.forEach((row, rowIndex) => {\r\n      const cellsInRow = row.querySelectorAll('.field-cell');\r\n\r\n      this.data[rowIndex].forEach((cellValue, tileIndex) => {\r\n        cellsInRow[tileIndex].textContent = cellValue === 0 ? ' ' : cellValue;\r\n      });\r\n    });\r\n\r\n    this.gameScoreBlock.textContent = this.score;\r\n    this.colorizing();\r\n  }\r\n\r\n  saveMaxScore() {\r\n    if (this.score > localStorage.getItem('score')) {\r\n      localStorage.setItem('score', this.score);\r\n    }\r\n  }\r\n\r\n  cycle(check) {\r\n    for (let row = 0; row < this.data.length; row++) {\r\n      if (check) {\r\n        for (let tile = 0; tile < this.data[row].length - 1; tile++) {\r\n          if (this.data[row][tile] === this.data[row][tile + 1]\r\n            || this.data[row][tile] === 0) {\r\n            return false;\r\n          }\r\n        }\r\n      } else {\r\n        for (let tile = 0; tile < this.data[row].length; tile++) {\r\n          if (row < this.data.length - 1\r\n            && (this.data[row][tile] === this.data[row + 1][tile]\r\n              || this.data[row][tile] === 0)) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  isGameOver() {\r\n    if (this.data.some(row => row.includes(0))) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.cycle(true) || !this.cycle(false)) {\r\n      return false;\r\n    }\r\n\r\n    this.saveMaxScore();\r\n\r\n    localStorage.setItem('score', this.score);\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst game = new Game2048();\r\n"],"names":["_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","document","querySelector","textContent","localStorage","getItem","protoProps","staticProps","Game2048","_this","_class_call_check","instance","Constructor","TypeError","TILE_CLASSES","GRID_SIZE","data","Array","from","fill","score","inProgress","startButton","messageWin","messageStart","messageLose","gameScoreBlock","fieldRows","querySelectorAll","getMaxScore","addEventListener","handleStartClick","e","handleKeyPress","value","innerText","startGame","restartGame","classList","replace","add","clearField","randomizer","domReload","saveMaxScore","prevData","JSON","parse","stringify","moveExecuted","makeMove","isEqual","isGameOver","endGame","direction","mergeTiles","tileMovement","isWin","remove","arr1","arr2","values","getHorizontalValues","getVerticalValues","updateDataArray","rowIndex","nonZeroValues","filter","element","zeroValues","concat","columnIndex","column","map","row","index","_loop","getValues","merged","mergeAdjacentTiles","i1","slice","count","emptyPositions","getEmptyPositions","randomIndex","Math","floor","random","_emptyPositions_randomIndex","tile","push","forEach","cellsInRow","cellValue","tileIndex","className","some","includes","colorizing","setItem","check","tile1","cycle","prototype"],"version":3,"file":"index.ab88968d.js.map"}